# You can override the included template(s) by including variable overrides
#
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
#
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
#
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

stages:
  - setup
  - build
  - test
  - deploy

variables:
  RAILS_ENV: ci
  SECRET_KEY_BASE: not-actually-secret
  POSTGRES_PASSWORD: testpass123
  CACHE_FALLBACK_KEY: main

include:
  - local: ".gitlab/caches.yml"
  - local: ".gitlab/setup-langs.yml"

default:
  image: ruby:3.3.4
  cache:
    - !reference [.cache_pull]

install-deps:
  stage: setup
  inherit:
    default:
      - image
  cache:
    - !reference [.cache_ruby_pull_push]
    - !reference [.cache_yarn_pull_push]
  extends: .setup_langs

# This will almost definitely need to move out to an include
setup-project:
  stage: setup
  needs: ["install-deps"]
  cache:
    - !reference [.cache_ruby]
    - !reference [.cache_yarn]
    - !reference [.cache_assets_pull_push]
  services:
    - name: postgres:15
      alias: pg
  script:
    - !reference [.setup_langs, script]
    # This has to come late because we need CI_SERVICE_pg defined
    - export DATABASE_URL="postgres://postgres:${POSTGRES_PASSWORD}@${CI_SERVICE_pg}:5432/rtci_test"
    - bin/rails db:create
    - bundle exec rake assets:precompile
    - bundle exec rake db:schema:load
    # Try running server just to see if it'll work
    - bundle exec rails server &
    - RAILS_PID=$!
    - sleep 5
    - RESULT=$(curl http://localhost:8080)
    - kill $RAILS_PID
    - echo "$RESULT" | grep -q "<title>Rtci</title>"

# Need to split out the project setup stuff to get this working, or copy it all in here but that would be silly
.run-server:
  stage: setup
  needs: ["install-deps", "setup-project"]
  script:
    - bundle exec rails server &
    - sleep 5
    - curl http://localhost:3000 -I

.brakeman-scan:
  stage: test
  script:
    - echo "Brakeman scan..."
    - echo "Scan complete."
.bundle-audit:
  stage: build
  script:
    - echo "Bundle audit..."
    - echo "Scan complete"
.yarn-audit:
  stage: build
  script:
    - echo "Yarn audit..."
    - echo "Scan complete"
.ruby-bom:
  stage: build
  script:
    - echo "Ruby SBOM Generation..."
    - echo "Generation Complete"
.owasp-scan:
  stage: test
  #TODO: check gitlab security templates for this scan
  #TODO: Owasp Dail Scan
  script:
    - echo "OWASP ZAP Scan..."
    - echo "Scan Complete"
.pa11y-scan:
  stage: test
  script:
    - echo "Pa11y Scan..."
    - echo "Scan Complete"
.rspec:
  stage: test
  script:
    - echo "Rspec..."
    - echo "Rspec Complete"

.deploy-staging:
  stage: deploy
  environment: staging
  script:
    - echo "deploy staging"
.deploy-production:
  stage: deploy
  environment: production
  script:
    - echo "deploy staging"
.terraform-staging:
  stage: deploy
  environment: staging
  script:
    - echo "deploy staging"
.terraform-production:
  stage: deploy
  environment: production
  script:
    - echo "deploy production"

.sast:
  stage: test
  include:
    - template: Security/SAST.gitlab-ci.yml
